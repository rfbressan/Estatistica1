CGroup=paste("CGroup", cut(swiss$Catholic, 10, labels = F))
)
matrix.fertility <- with(dfswiss, tapply(Fertility, FGroup, CGroup, mean))
matrix.fertility <- with(dfswiss, {tapply(Fertility, FGroup, CGroup, mean)})
matrix.fertility <- with(dfswiss, {tapply(Fertility, FGroup + CGroup, mean)})
dfswiss <- cbind(swiss,
FGroup=paste("AGroup", cut(swiss$Agriculture, 10, labels = F)),
CGroup=paste("CGroup", cut(swiss$Catholic, 10, labels = F))
)
dfswiss <- cbind(swiss,
FGroup=paste("AGroup", cut(swiss$Agriculture, 10, labels = F)),
CGroup=paste("CGroup", cut(swiss$Catholic, 10, labels = F))
)
fertility.table <- with(dfswiss, xtabs(Fertility ~ Agriculture + Catholic, data = dfswiss))
ftable(fertility.table)
rm(dfswiss)
dfswiss <- cbind(swiss,
FGroup=paste("AGroup", cut(swiss$Agriculture, 10, labels = F)),
CGroup=paste("CGroup", cut(swiss$Catholic, 10, labels = F))
)
fertility.table <- with(dfswiss, xtabs(Fertility ~ Agriculture + Catholic, data = dfswiss))
View(dfswiss)
str(fertility.table)
head(fertility.table)
table(dfswiss$Agriculture, dfswiss$Catholic)
t <- table(dfswiss$Agriculture, dfswiss$Catholic)
t <- table(dfswiss$AGroup, dfswiss$CGroup)
dfswiss <- cbind(swiss,
AGroup=paste("AGroup", cut(swiss$Agriculture, 10, labels = F)),
CGroup=paste("CGroup", cut(swiss$Catholic, 10, labels = F))
)
t <- table(dfswiss$AGroup, dfswiss$CGroup)
t <- tapply(dfswiss$Fertility, list(dfswiss$AGroup, dfswiss$CGroup), mean)
attach(dfswiss)
t1 <- table(AGroup, CGroup)
t <- tapply(Fertility, list(AGroup, CGroup), mean)
detach(dfswiss)
View(t)
ftable(t1)
tapply(airquality)
sapply(airquality, mean)
tapply(airquality, mean)
str(chickwts)
with(airquality, table(Month, Temp < 65))
table(LowTemp = airquality$Temp < 65, airquality$Month)
prop.table(with(airquality, table(Month, Temp > 80)),1)
prop.table(with(airquality, table(Temp > 80, Month)),2)
lapply(airquality, mean)
my.data<-data.frame(Treatment=c(rep("A",4),rep("B",4)),
Stone=rep(rep(c("Small","Large"),c(2,2)),2),
Success=rep(c(1,0),4),
Count=c(81,6,192,71,234,36,55,25))
length(my.data)
nrow(my.data)
View(my.data)
my.table<-xtabs(Count~Treatment+Success+Stone,data=my.data)
ftable(my.table)
prop.table(my.table, 1:2)
margin.table(my.table, 1:2)
prop.table(margin.table(my.table, 1:2),1)
prop.table(my.table[,,2], 1)
prop.table(my.table[,,1], 1) # index 1 means large stones
prop.table(my.table[1,,],1)
prop.table(my.table[1,,],2)
prop.table(my.table[2,,],2) # and now fort Treatment B
prop.table(margin.table(my.table, c(3,1)),1)
op <- par()
par(mfrow = c(3, 3), col = "red", lwd = 3)
matriz <- matrix(nrow = 25, ncol = 9)
View(matriz)
for (i in 1:9){
matriz[,i] <- rnorm(25)
}
View(matriz)
hist(matriz)
curve(rnorm, add = TRUE)
curve(dnorm, add = TRUE)
curve(qnorm, add = TRUE)
curve(pnorm, add = TRUE)
hist(matriz)
curve(pnorm, add = TRUE)
curve(25*pnorm, add = TRUE)
curve("25*pnorm", add = TRUE)
curve('25*pnorm', add = TRUE)
par(op)
par(mfrow = c(3, 3), col = "red", lwd = 3)
matriz <- matrix(nrow = 25, ncol = 9)
for (i in 1:9){
matriz[,i] <- rnorm(25)
hist(matriz[,i])
}
for (i in 1:9){
matriz[,i] <- rnorm(25)
hist(matriz[,i])
curve(pnorm, add = TRUE)
}
for (i in 1:9){
matriz[,i] <- rnorm(25)
hist(matriz[,i])
curve(dnorm, add = TRUE)
}
for (i in 1:9){
matriz[,i] <- rnorm(25)
hist(matriz[,i])
curve(dnorm(25), add = TRUE)
}
for (i in 1:9){
matriz[,i] <- rnorm(25)
hist(matriz[,i])
curve(dnorm(25), add = TRUE)
}
for (i in 1:9){
matriz[,i] <- rnorm(25)
hist(matriz[,i], freq = TRUE)
curve(dnorm, add = TRUE)
}
for (i in 1:9){
matriz[,i] <- rnorm(25)
hist(matriz[,i], freq = FALSE)
curve(dnorm, add = TRUE)
}
par(op)
par(mfrow = c(3, 3), col = "red", lwd = 3)
matriz <- matrix(nrow = 25, ncol = 9)
for (i in 1:9){
matriz[,i] <- rnorm(25)
hist(matriz[,i], freq = FALSE)
curve(dnorm, add = TRUE)
}
library("RODBC", lib.loc="~/R/win-library/3.3")
db <- file.path("C:/Users/Rafael/Documents/UDESC/R/Bovespa/BovespaDB.accdb")
channel<-odbcConnectAccess2007(db)
channel<-odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:/Users/Rafael/Documents/UDESC/R/Bovespa/BovespaDB.accdb")
odbcDataSources()
library("RODBC", lib.loc="~/R/win-library/3.3")
db <- file.path("C:/Users/Rafael/Documents/UDESC/R/Bovespa/BovespaDB.accdb")
channel <- odbcConnectAccess2007(db)
sqlTables(channel)
abev <- sqlFetch(channel, "ABEV3")
abevret <- sqlQuery(channel, "SELECT RETLOG1D FROM ABEV3")
odbcClose(channel)
rm(list = ls())
rm(list = ls())
# Lab 9
my.data<-data.frame(Treatment=c(rep("A",4),rep("B",4)),
Stone=rep(rep(c("Small","Large"),c(2,2)),2),
Success=rep(c(1,0),4),
Count=c(81,6,192,71,234,36,55,25))
my.table<-xtabs(Count~Treatment+Success+Stone,data=my.data)
ftable(my.table)
prop.table(my.table[,,2], 1) # index 2 means small stones
prop.table(my.table[1,,],2)
apropos("hist")
??history
rm(list = ls())
x <- c(0,0,1,1)
y <- c(0,1,0,1)
!x
x&y
x|y
xor(x,y)
x&&y
x <- 10.5
x
class(x)
y <- 4
class(y)
is.integer(y)
y <- as.integer(y)
is.integer(y)
class(y)
y <- as.integer(3.14)
x <- as.integer("5.16")
y
x
b <- as.integer("banana")
as.integer(TRUE)
class(as.integer(TRUE))
z <- as.integer("5.16B")
z
class(as.integer("6.16"))
class("5.16")
z <- 1+2i
class(z)
real(z)
x <- 1
y <- 2
x>y
z <- x>y
z
class(z)
paste(primeiro, ultimo, sep = " ")
primeiro <- "Rafael"
ultimo <- "Bressan"
paste(primeiro, ultimo, sep = " ")
paste(primeiro, ultimo, sep = "")
paste(primeiro, ultimo)
sprintf("Meu nome é %s %s", primeiro, ultimo)
?sub
?sub
x <- "3.14"
x
class(x)
library(PerformanceAnalytics)
library(ggplot2)
library(gridExtra)
X <- rnorm(100, 0.05, 0.10)
pnorm(0.10, 0.05, 0.10)
1-pnorm(0.10, 0.05, 0.10)
pnorm(-0.10, 0.05, 0.10)
pnorm(c(-0.05, 0.15), 0.05, 0.10)
p2 <- pnorm(c(-0.05, 0.15), 0.05, 0.10)
p2[2]-p2[1]
qnorm(0.01, 0.05, 0.10)
qnorm(0.05, 0.05, 0.10)
qnorm(0.95, 0.05, 0.10)
qnorm(0.99, 0.05, 0.10)
x <- seq(-0.25, 0.35, by=0.01)
op <- par()
plot(x, dnorm(x, 0.05, 0.1))
plot(x, dnorm(x, 0.05, 0.1), lty="l")
plot(x, dnorm(x, 0.05, 0.1), lty=1)
plot(x, dnorm(x, 0.05, 0.1), lty=2)
plot(x, dnorm(x, 0.05, 0.1), lty="1")
plot(x, dnorm(x, 0.05, 0.1), type = "l", col = "blue")
plot(x, dnorm(x, 0.05, 0.1), type = "l", col = "blue", lwd = 2)
curve(dnorm(x, 0.025, 0.05))
curve(dnorm(x, 0.025, 0.05), x)
curve(dnorm(x, 0.025, 0.05), x)
curve(dnorm(x, 0.025, 0.05), -0.25, 0.35, n = 61)
plot(x, dnorm(x, 0.05, 0.1), type = "l", col = "blue", lwd = 2)
curve(dnorm(x, 0.025, 0.05), -0.25, 0.35, n = 61, add = TRUE)
W0 = 100000
q5 <- qnorm(0.05, 0.04, 0.09)
q5 <- qnorm(0.01, 0.04, 0.09)
q1 <- qnorm(0.01, 0.04, 0.09)
q5 <- qnorm(0.05, 0.04, 0.09)
VaR5 <- W0*q5
VaR1 <- W0*q1
VaR5
VaR1
qR5 <- exp(q5)-1
qR1 <- exp(q1)-1
W0*qR1
W0*qR5
(41.29-38.23)/38.23
log(1+(41.29-38.23)/38.23)
library(PerformanceAnalytics)
returns.milho <- Return.calculate(xts(Preco, Datas))
milhodf <- read.csv2(file.choose())
milhodf$Datas=seq(as.Date("2005-07-01"), as.Date("2012-07-01"), by="1 mon")
colnames(milhodf)[4] <- "Mes"
attach(milhodf)
summary(Preco)
gpreco <- ggplot(milhodf)+
#scale_y_log10() +
aes(Datas, Preco) +
geom_line(linetype = 1) +
geom_line(color = "red", size = 1) +
labs(title = "Evolução do preço da saca de milho", y = "Preço (R$)", x = "")
gbox <- ggplot(milhodf) +
aes(Datas, Preco, group = format(Datas, "%Y")) +
geom_boxplot()+
labs(x = "Datas", y = "Preço (R$)")
grid.arrange(gpreco, gbox, nrow=2, ncol=1)
# Cria a serie temporal xts dos precos do milho
milhots <- xts(Preco, Datas)
colnames(milhots) <- "Preço"
# Gera uma xts por ano com algumas estatísticas do preço
t1 <- merge(apply.yearly(milhots, min), # Valor mínimo no ano
apply.yearly(milhots, max), # Valor máximo no ano
apply.yearly(milhots, mean), # Média
apply.yearly(milhots, sd))   # Desvio padrão
colnames(t1) <- c("Mínimo", "Máximo", "Média", "Desvio Padrão")
# Para plotar esta tabela com o knitr no RMarkdown é necessário gerar
# um data.frame a partir da xts e colocar na primeira coluna os anos
t2 <- as.data.frame(t1)
t2 <- cbind(format(as.Date(rownames(t2)), "%Y"), t2)
colnames(t2)[1] <- "Ano"
row.names(t2) <- NULL # Para não aparecer no kable()
# calcular os retornos logaritimicos e plotar 3 gráficos de performance
returns.milho <- Return.calculate(xts(Preco, Datas))
colnames(returns.milho) <- "Retornos"
charts.PerformanceSummary(returns.milho, wealth.index = TRUE,
colorset = rich6equal)
# e plotar em um histograma
# mostrando a densidade calculada.
chart.Histogram(returns.milho, methods = c("add.density", "add.normal"),
main = "Densidade dos Retornos",
probability = FALSE)
legend("right", c("Densidade", "Normal"), title = "Legenda", fill = c("#00008F", "#005AFF"))
chart.BarVaR(returns.milho, methods = c("ModifiedVaR", "ModifiedES"),
legend.loc = "topright",
colorset = rich6equal)
charts.PerformanceSummary(returns.milho, wealth.index = TRUE,
colorset = rich6equal)
chart.Histogram(returns.milho, methods = c("add.density", "add.normal"),
main = "Densidade dos Retornos",
probability = FALSE)
legend("right", c("Densidade", "Normal"), title = "Legenda", fill = c("#00008F", "#005AFF"))
chart.BarVaR(returns.milho, methods = c("ModifiedVaR", "ModifiedES"),
legend.loc = "topright",
colorset = rich6equal)
chart.BarVaR(returns.milho, methods = c("ModifiedVaR", "ModifiedES"),
legend.loc = "topright",
colorset = rich6equal,
lwd = 3)
chart.BarVaR(returns.milho, methods = c("ModifiedVaR", "ModifiedES"),
legend.loc = "topright",
colorset = rich6equal,
lwd = 5)
chart.BarVaR(returns.milho, methods = c("ModifiedVaR", "ModifiedES"),
legend.loc = "topright",
show.greenredbars = TRUE,
lwd = 5)
table.Stats(returns.milho)
table.CalendarReturns(returns.milho)
tmonth <- table.CalendarReturns(returns.milho)
View(tmonth)
tmonth <- table.CalendarReturns(returns.milho)
tmonth
library(knitr)
write_bib(c("ggplot2", "gridExtra"), file = "C:\\Users\\Rafael\\Documents\\UDESC\\Bibliografias\\rpackages.bib")
str(milhodf)
write_bib(c("xts"), file = "C:\\Users\\Rafael\\Documents\\UDESC\\Bibliografias\\rpackages.bib")
View(t1)
rm(t1)
t1 <- merge(apply.yearly(milhots, min),
apply.yearly(milhots, max),
apply.yearly(milhots, mean),
apply.yearly(milhots, sd))
View(t1)
colnames(t1) <- c("Mínimo", "Máximo", "Média", "Desvio Padrão")
library(ggplot2)
gqqplot <- ggplot(returns.milho) +
aes(index(returns.milho), Retornos) +
geom_qq(na.rm = TRUE) # remove o NA dos retornos
gqqplot
as.data.frame(returns.milho)
df <- as.data.frame(returns.milho)
View(df)
df <- as.data.frame(returns.milho, row.names = TRUE)
df <- as.data.frame(returns.milho, row.names = FALSE)
View(df)
cbind(index(returns.milho), as.data.frame(returns.milho))
cbind(Datas=index(returns.milho), as.data.frame(returns.milho))
gqqplot <- ggplot(cbind(Datas=index(returns.milho), as.data.frame(returns.milho))) +
aes(Datas, Retornos) +
geom_qq(na.rm = TRUE) # remove o NA dos retornos
gqqplot
gqqplot <- ggplot(cbind(Datas=index(returns.milho), as.data.frame(returns.milho))) +
aes(Datas, Retornos) +
geom_qq() # remove o NA dos retornos
gqqplot
as.data.frame(returns.milho, na.rm = TRUE)
returns.milho <- Return.calculate(milhots, na.rm = TRUE)
returns.milho <- Return.calculate(milhots, na.rm = TRUE)
na.exclude(df)
gqqplot <- ggplot(na.exclude(cbind(Datas=index(returns.milho), as.data.frame(returns.milho)))) +
aes(Datas, Retornos) +
geom_qq() # remove o NA dos retornos
gqqplot
na.exclude(cbind(Datas=index(returns.milho), as.data.frame(returns.milho)))
na.exclude(returns.milho)
View(returns.milho)
returns.milho <- na.exclude(Return.calculate(milhots))
colnames(returns.milho) <- "Retornos"
gqqplot <- ggplot(cbind(Datas=index(returns.milho), as.data.frame(returns.milho))) +
aes(Datas, Retornos) +
geom_qq() # remove o NA dos retornos
gqqplot
rm(gqqplot)
gqqplot <- ggplot(cbind(Datas=index(returns.milho), as.data.frame(returns.milho))) +
aes(Datas, Retornos) +
geom_qq() # remove o NA dos retornos
gqqplot
df <- cbind(Datas=index(returns.milho), as.data.frame(returns.milho))
str(df)
gqqplot <- ggplot(df) +
aes(Datas, Retornos) +
geom_qq() # remove o NA dos retornos
gqqplot
rm(gqqplot)
gqq <- ggplot(df) +
aes(Datas, Retornos) +
geom_qq() # remove o NA dos retornos
gqq
gqq <- ggplot(df) +
aes(Datas, Retornos) +
geom_qq() # remove o NA dos retornos
gqq
gqq <- ggplot(df) +
aes(Datas, Retornos) +
stat_qq()
gqq
str(df)
gqq <- ggplot(df) +
aes(Retornos) +
stat_qq()
gqq
gqq <- ggplot(df) +
aes(Retornos) +
stat_qq() +
geom_qq()
gqq
qplot(retornos = Retornos, data = df)
qplot(retornos = df$Retornos, data = df)
qplot(sample = df$Retornos, data = df)
qplot(amostra = df$Retornos, data = df)
qplot(sample = df$Retornos, data = df, ylab = "Retornos")
geom_abline(slope = 1)
p <- qplot(sample = df$Retornos, data = df, ylab = "Retornos")
p + geom_abline(slope = 1)
p
p <- qplot(sample = df$Retornos, data = df, ylab = "Retornos")
p + geom_abline(slope = 1, col = "red")
p
p <- qplot(sample = df$Retornos, data = df, ylab = "Retornos")
p + geom_abline(intercept = 0, slope = 1, col = "red")
p
p <- qplot(sample = df$Retornos, data = df, ylab = "Retornos")
p + geom_abline(intercept = 0, slope = 0.1, col = "red")
p
chart.QQPlot(returns.milho)
chart.QQPlot(returns.milho,
ylab = "Quantis dos Retornos",
xlab = "Quantis da Normal",
main = "QQ Plot Retornos x Normal",
tck = 1,
tcl = 1,
bg = "darkgrey")
chart.QQPlot(returns.milho,
ylab = "Quantis dos Retornos",
xlab = "Quantis da Normal",
main = "QQ Plot Retornos x Normal",
)
grid()
1+returns.milho
log(1+returns.milho)
length(milhots)
getwd()
install.packages("plotly")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(plotly)
plot_ly(milhots)
library("plotly", lib.loc="~/R/win-library/3.3")
milhodf <- read.csv2(file.choose())
milhodf$Datas=seq(as.Date("2005-07-01"), as.Date("2012-07-01"), by="1 mon")
colnames(milhodf)[4] <- "Mes"
milhots <- xts(Preco, Datas)
colnames(milhots) <- "Preço"
library("xts", lib.loc="~/R/win-library/3.3")
milhots <- xts(Preco, Datas)
colnames(milhots) <- "Preço"
attach(milhodf)
milhots <- xts(Preco, Datas)
colnames(milhots) <- "Preço"
plot_ly(milhots)
plot_ly(as.data.frame(milhots))
head(economics)
head(milhodf)
plot_ly(milhodf, x = Datas, y = Preco)
View(milhodf)
plot_ly(milhodf, x = Datas, y = Preco, color = Preco)
library("viridis", lib.loc="~/R/win-library/3.3")
plot_ly(milhodf, x = Datas, y = Preco, color = Preco)
plot_ly(milhodf, x = Datas, y = Preco)
knit_with_parameters('~/UDESC/R/Introducao ao R - Aisha/Relatorio Milho.Rmd')
rm(list=ls())
library(reshape) # Para rearranjar os dados
library(ggplot2)
library(xtable)
setwd("C:\\Users\\Rafael\\Documents\\UDESC\\2 - Estatistica I\\Trabalho PIB per Capta")
# Leitura dos dados no arquivo csv para um Data Frame
dadosmicro <- na.omit(read.csv2("Microrregioes-final.csv"))
dadosreg <- na.omit(read.csv2("PIB per capita-final.csv"))
microrregioes <- levels(dadosmicro$Microrregião)
microrregioes <- cbind(microrregioes, c("ARA", "BLU", "CLS", "CAS", "CHO", "COA", "CRA",
"CUS", "FLS", "ITI", "ITA", "JOA", "JOE", "RIL",
"SAL", "SAE", "TAO", "TIS", "TUO", "XAE"))
colnames(microrregioes) <- c("Microrregiões", "Sigla")
options(scipen = 7)
colnames(dadosmicro)[4:15] <- c("1999","2000","2001","2002","2003", "2004","2005",
"2006","2007","2008","2009","2010")
dadostemp <- melt(dadosmicro, id=c("Município", "Microrregião"),
measure.vars = c("1999","2000","2001","2002","2003", "2004","2005",
"2006","2007","2008","2009","2010"),
variable_name = "Ano")
regioes <- c("NORTE", "NORDESTE", "CENTRO-OESTE", "SUDESTE", "SUL")
estados <- c("PR", "SC", "RS")
for(i in seq_along(microrregioes[,1])){
submicro <- subset(dadosmicro, subset = (Microrregião==microrregioes[i,1]),
select = as.character(2010))
histo <- ggplot(submicro, aes(x=submicro[,1]))+
geom_histogram(colour="black", fill="White",binwidth = 1000)+
labs(x="PIB per capita (R$)", y="Contagem", title=paste("Microrregião de ",
microrregioes[i]))
#histo <- histo+geom_density(aes(y=..count..))
# Plota para um arquivo
jpeg(paste("Hist_",microrregioes[i,2],".jpg"), width = 593, height = 434)
print(histo)
dev.off() # Fecha o arquivo grafico
}
tapply(dadosmicro$Microrregião, dadosmicro$Microrregião, length)
max(tapply(dadosmicro$Microrregião, dadosmicro$Microrregião, length))
teste <- tapply(dadosmicro$Microrregião, dadosmicro$Microrregião, length)
teste
dimnames(teste)
